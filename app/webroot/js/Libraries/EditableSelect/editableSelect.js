
//Setup the object for handling this jurry rigged editable select box
var EditableSelect = function(){

}

EditableSelect.prototype = {

	//PUBLIC FUNCTION: addNewOption
	//Add a new option
	addNewOption:function( triggeringEvent ){
	
		//Get the targeted element
		var element = triggeringEvent.target;	
		
		//Get the editableSelect value
		var editableSelectUID = jQuery( element ).attr( 'editableSelect' );
		
		//Create a value to assign to the new option
		var newOptionValue = 'newOption_' + jQuery.now();

		jQuery( 'select[editableSelect="' + editableSelectUID + '"].editableSelect' ).each( function(){

            //Create the new option
            jQuery(this).append(
                '<option value="' + newOptionValue + '">New Option</option>'
            );

            //Select the new option
            jQuery(this).val( newOptionValue );

        });
		
		//Adjust the text box
		this.adjustTextBoxToSelect( triggeringEvent );
		
	},
	
	//PUBLIC FUNCTION: adjustSelectToTextBox
	//Change the option's text to match what has been typed in the select box
	adjustSelectToTextBox:function( triggeringEvent ){
				
		//Get the targeted element
		var element = triggeringEvent.target;
				
		//Grab the editableSelect value
		//This should be a dateTimeStamp generated by the PHP that generated
		//the element and should have a unique match with the select box that
		//we paired it with to get this editable select functionality.
		var editableSelectUID = jQuery( element ).attr( 'editableSelect' );
		
		//Now grab the value stored in the corresponding select
		var typedText = jQuery( 'input[type="text"][editableSelect="' + editableSelectUID + '"].editableSelect' ).val();
		
		//Now that we have the text that's selected we can just slam it into the corresponding text input and we're golden
		jQuery( 'select[editableSelect="' + editableSelectUID + '"].editableSelect > option:selected' ).html( typedText );
		
	},
	
	//PUBLIC FUNCTION: adjustTextBoxToSelect
	//Change the contents of the given Text Box to reflect the contents of
	//the selected option in its paired select box.
	adjustTextBoxToSelect:function( triggeringEvent ){
		
		//Get the targeted element
		var element = triggeringEvent.target;
		
		//Grab the editableSelect value
		//This should be a dateTimeStamp generated by the PHP that generated
		//the element and should have a unique match with the text box that
		//we paired it with to get this editable select functionality.
		var editableSelectUID = jQuery( element ).attr( 'editableSelect' );
		
		//Now grab the value stored in the corresponding select
		var selectedOption = jQuery( 'select[editableSelect="' + editableSelectUID + '"].editableSelect' ).val();
		var selectedText = jQuery( 'select[editableSelect="' + editableSelectUID + '"].editableSelect > option[value="'+selectedOption+'"]' ).html();
		
		//Now that we have the text that's selected we can just slam it into the corresponding text input and we're golden
		jQuery( 'input[type="text"][editableSelect="' + editableSelectUID + '"].editableSelect' ).val( selectedText );
		
	},
	
	//PUBLIC FUNCTION: handleEverything
	//The Pepper Potts function, in that it will just handle everything
	handleEverything:function(){
		this.handleNewButton();
        this.handleRemoveButton();
        this.handleSaveButton();
        this.handleSelectChange();
	},
	
	//PUBLIC FUNCTION: handleNewButton
	//Setup the handlers for when the user wants to add a new record to the select
	handleNewButton:function(){

        var _this = this;

		//Add the handler
		jQuery( document ).on(
            'click',
            'input[type="button"].editableSelectNew',
            function(){
                _this.addNewOption();
            }
		);
		
	},
	
	//PUBLIC FUNCTION: handleRemoveButton
	//If the user wants to delete an option they'll click a button and we better be prepared for that
	handleRemoveButton:function(){

        var _this = this;

        //Add the handler
        jQuery( document ).on(
            'click',
            'input[type="button"].editableSelectRemove',
            function(){
                _this.removeOption();
            }
        );
		
	},
	
	//PUBLIC FUCNTION: handleSaveButton
	//Handle the save button that'll change what is stored in the select
	handleSaveButton:function(){

        var _this = this;

        //Add the handler
        jQuery( document ).on(
            'click',
            'input[type="button"].editableSelectSave',
            function(){
                _this.adjustSelectToTextBox();
            }
        );
				
	},
	
	//PUBLIC FUNCTION: handleSelectChange
	//Handle changing what displays in the textbox when the select is changed
	handleSelectChange:function(){

        var _this = this;

        //Add the handler
        jQuery( document ).on(
            'change',
            'select.editableSelect',
            function(){
                _this.adjustTextBoxToSelect();
            }
        );

        //Run an initial populate
        jQuery('select.editableSelect').trigger('change');
		
	},
	
	//PUBLIC FUNCTION: removeOption
	//Remove the currently selected option and then move to another option
	removeOption:function( triggeringEvent ){
	
		//Get the targeted element
		var element = triggeringEvent.target;	
		
		//Get the editableSelect value
		var editableSelectUID = jQuery( element ).attr( 'editableSelect' );
		
		//Create the new option
		jQuery( 'select[editableSelect="' + editableSelectUID + '"].editableSelect > option:selected' ).remove();
		
		//Adjust the text box
		this.adjustTextBoxToSelect( triggeringEvent );
		
	}
	
}

jQuery( document).ready( function(){
    var EditableSelect_editableSelect = new EditableSelect();
    EditableSelect_editableSelect.handleEverything();
})